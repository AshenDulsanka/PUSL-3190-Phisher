generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model URL {
  id                  Int                @id @default(autoincrement())
  url                 String             @unique
  isPhishing          Boolean
  suspiciousScore     Float
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // Basic features
  usingIP             Boolean?
  urlLength           Int?
  domainAge           Int?
  hasHTTPS            Boolean?
  numDots             Int?
  numHyphens          Int?
  numSubdomains       Int?
  hasAtSymbol         Boolean?
  isShortened         Boolean?
  hasSpecialChars     Boolean?
  
  // content features
  hasIframe           Boolean?
  disablesRightClick  Boolean?
  hasPopup            Boolean?
  
  // additional fields for better tracking
  lastAnalyzed        DateTime           @default(now())
  analysisSources     String[]           // e.g. ["browser_extension", "chatbot"]
  analyzeCount        Int                @default(1)
  detectedPhishingCount Int              @default(0)

  // relationships
  detectionSessions   DetectionSession[]
  reports             URLReport[]
  modelEvaluations    ModelEvaluation[]
}

model DetectionSession {
  id             Int      @id @default(autoincrement())
  sessionId      String   @unique
  detectedAt     DateTime @default(now())
  browserInfo    String?
  ipAddress      String?
  
  // reference to the URL
  urlId          Int
  url            URL      @relation(fields: [urlId], references: [id])
}

model URLReport {
  id           Int      @id @default(autoincrement())
  reportedUrl  String
  reportType   String   // false_positive, false_negative, confirm_phishing, confirm_legitimate
  comments     String?
  reportedAt   DateTime @default(now())
  reporterEmail String?
  source       String?  // browser_extension, chatbot
  
  // optional relation to URL if it exists in the database
  urlId        Int?
  url          URL?     @relation(fields: [urlId], references: [id])
}

model MLModel {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  type          String   // random_forest, gradient_boosting, etc.
  version       String
  trainedAt     DateTime @default(now())
  
  // Model metrics
  accuracy      Float?
  precision     Float?
  recall        Float?
  f1Score       Float?
  areaUnderROC  Float?
  parameters    String?  // JSON string with model parameters
  
  // For continuous learning
  feedbackIncorporated Boolean @default(false)
  lastUpdated     DateTime?
  
  // Relationships
  evaluations     ModelEvaluation[]
  trainingLogs    ModelTrainingLog[]
}

model ModelEvaluation {
  id             Int      @id @default(autoincrement())
  predictedScore Float
  actualLabel    Boolean?
  evaluatedAt    DateTime @default(now())
  
  // References
  modelId        Int
  model          MLModel  @relation(fields: [modelId], references: [id])
  
  urlId          Int
  url            URL      @relation(fields: [urlId], references: [id])
}

model ModelTrainingLog {
  id             Int      @id @default(autoincrement())
  logType        String   // training, validation, testing
  message        String
  metrics        String?  // JSON string with metrics
  timestamp      DateTime @default(now())
  
  // References
  modelId        Int
  model          MLModel  @relation(fields: [modelId], references: [id])
}

model SystemLog {
  id        Int      @id @default(autoincrement())
  component String   // chatbot, extension, web_client, web_server
  logLevel  String   // info, warning, error, debug
  message   String
  timestamp DateTime @default(now())
  metadata  String?  // JSON string with additional info
}

model Admin {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  @@map("admins")
}

// for redis backup/sync (continuous learning data)
model FeedbackQueue {
  id          Int      @id @default(autoincrement())
  url         String
  isPhishing  Boolean
  feedbackType String
  timestamp   DateTime @default(now())
  processed   Boolean  @default(false)
  processedAt DateTime?
}