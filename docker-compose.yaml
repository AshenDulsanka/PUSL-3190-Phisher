services:
  # extension backend (python fastAPI)
  extension_backend:
    container_name: extension_backend
    build: 
      context: ./extension_backend
      dockerfile: Dockerfile
    ports:
      - "${API_PORT_BE}:8000"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - API_DEBUG=${API_DEBUG_BE}
      - API_HOST=${API_HOST_BE}
      - API_PORT=${API_PORT_BE}
      - API_KEY=${API_KEY_BE}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE_BE}
      # web server API for database operations
      - WEB_SERVER_DOCKER_API=${WEB_SERVER_DOCKER_API}
      - DB_SYNC_ENABLED=${DB_SYNC_ENABLED}
    restart: unless-stopped
    depends_on:
      - web_server
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f  $EXTENSION_HEALTH_CHECK_URL"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  
  # chatbot backend (python fastAPI)
  chatbot:
    container_name: chatbot
    build: 
      context: ./chatbot
      dockerfile: Dockerfile
    ports:
      - "${API_PORT_CB}:8001"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - API_DEBUG=${API_DEBUG_CB}
      - API_HOST=${API_HOST_CB}
      - API_PORT=${API_PORT_CB}
      - API_KEY=${API_KEY_CB}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE_CB}
      # redis config
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - REDIS_ENABLED=${REDIS_ENABLED}
      # web server API for database operations
      - WEB_SERVER_DOCKER_API=${WEB_SERVER_DOCKER_API}
      - DB_SYNC_ENABLED=${DB_SYNC_ENABLED}
    restart: unless-stopped
    depends_on:
      - redis
      - web_server
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f $CHATBOT_HEALTH_CHECK_URL"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  
  # web client (react)
  web_client:
    container_name: web_client
    build:
      context: ./web/client
      dockerfile: Dockerfile
    ports:
      - "${WEB_CLIENT_PORT}:3000"
    volumes:
      - ./web/client:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=${WEB_SERVER_DOCKER_URL}
    depends_on:
      - web_server
  
  # web server (node)
  web_server:
    container_name: web_server
    build:
      context: ./web/server
      dockerfile: Dockerfile
    ports:
      - "${WEB_SERVER_PORT}:5000"
    volumes:
      - ./web/server:/app
      - /app/node_modules
      - ./database:/app/database
    env_file:
      - .env
    environment:
      - PORT=${WEB_SERVER_PORT}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_URL=${WEB_CLIENT_URL}
    depends_on:
      - database
    
  # database (postgres)
  database:
    container_name: database
    image: postgres:17-alpine
    ports: 
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=${DB_AUTH_METHOD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # redis (cache)
  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data: